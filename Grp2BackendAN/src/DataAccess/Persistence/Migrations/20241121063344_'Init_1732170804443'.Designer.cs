// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using thinkbridge.Grp2BackendAN.DataAccess.Persistence;

#nullable disable

namespace thinkbridge.Grp2BackendAN.DataAccess.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241121063344_'Init_1732170804443'")]
    partial class Init_1732170804443
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.HasKey("TeamId");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_Teams_CreatedById");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.TeamsUsersMapping", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("AddedById")
                        .HasDatabaseName("IX_TeamsUsersMappings_AddedById");

                    b.HasIndex("UserId");

                    b.ToTable("TeamsUsersMappings");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoChecklist", b =>
                {
                    b.Property<int>("ToDoChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToDoChecklistId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<int>("ToDoTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ToDoChecklistId");

                    b.HasIndex("ToDoTaskId")
                        .HasDatabaseName("IX_ToDoChecklists_ToDoTaskId");

                    b.ToTable("ToDoChecklists");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoMaster", b =>
                {
                    b.Property<int>("ToDoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToDoTaskId"));

                    b.Property<string>("AssignedToId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasChecklist")
                        .HasColumnType("bit");

                    b.Property<bool>("HasReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssignedToTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<string>("MediaAttachmentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("MediaAttachmentURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("PercentageCompleted")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("RepeatFrequency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ToDoTaskId");

                    b.HasIndex("AssignedToId")
                        .HasDatabaseName("IX_ToDoMasters_AssignedToId");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("IX_ToDoMasters_CreatedById");

                    b.ToTable("ToDoMasters");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentAtDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SetById")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("SetForDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToDoTaskId")
                        .HasColumnType("int");

                    b.HasKey("ReminderId");

                    b.HasIndex("SetById")
                        .HasDatabaseName("IX_ToDoReminders_SetById");

                    b.HasIndex("ToDoTaskId")
                        .HasDatabaseName("IX_ToDoReminders_ToDoTaskId");

                    b.ToTable("ToDoReminders");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRole", "AspNetRoleClaimRoleIdfk")
                        .WithMany("AspNetRoleClaimRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetRoleClaimRoleIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "AspNetUserClaimUserIdfk")
                        .WithMany("AspNetUserClaimUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUserClaimUserIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "AspNetUserLoginUserIdfk")
                        .WithMany("AspNetUserLoginUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUserLoginUserIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserRole", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRole", "AspNetUserRoleRoleIdfk")
                        .WithMany("AspNetUserRoleRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "AspNetUserRoleUserIdfk")
                        .WithMany("AspNetUserRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUserRoleRoleIdfk");

                    b.Navigation("AspNetUserRoleUserIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "AspNetUserTokenUserIdfk")
                        .WithMany("AspNetUserTokenUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUserTokenUserIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.Team", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "TeamCreatedByIdfk")
                        .WithMany("TeamCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeamCreatedByIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.TeamsUsersMapping", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "TeamsUsersMappingAddedByIdfk")
                        .WithMany("TeamsUsersMappingAddedBies")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.Team", "TeamsUsersMappingTeamIdfk")
                        .WithMany("TeamsUsersMappingTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "TeamsUsersMappingUserIdfk")
                        .WithMany("TeamsUsersMappingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeamsUsersMappingAddedByIdfk");

                    b.Navigation("TeamsUsersMappingTeamIdfk");

                    b.Navigation("TeamsUsersMappingUserIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoChecklist", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.ToDoMaster", "ToDoChecklistToDoTaskIdfk")
                        .WithMany("ToDoChecklistToDoTasks")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ToDoChecklistToDoTaskIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoMaster", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "ToDoMasterCreatedByIdfk")
                        .WithMany("ToDoMasterCreatedBies")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ToDoMasterCreatedByIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoReminder", b =>
                {
                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", "ToDoReminderSetByIdfk")
                        .WithMany("ToDoReminderSetBies")
                        .HasForeignKey("SetById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("thinkbridge.Grp2BackendAN.Core.Entities.ToDoMaster", "ToDoReminderToDoTaskIdfk")
                        .WithMany("ToDoReminderToDoTasks")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ToDoReminderSetByIdfk");

                    b.Navigation("ToDoReminderToDoTaskIdfk");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaimRoles");

                    b.Navigation("AspNetUserRoleRoles");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaimUsers");

                    b.Navigation("AspNetUserLoginUsers");

                    b.Navigation("AspNetUserRoleUsers");

                    b.Navigation("AspNetUserTokenUsers");

                    b.Navigation("TeamCreatedBies");

                    b.Navigation("TeamsUsersMappingAddedBies");

                    b.Navigation("TeamsUsersMappingUsers");

                    b.Navigation("ToDoMasterCreatedBies");

                    b.Navigation("ToDoReminderSetBies");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.Team", b =>
                {
                    b.Navigation("TeamsUsersMappingTeams");
                });

            modelBuilder.Entity("thinkbridge.Grp2BackendAN.Core.Entities.ToDoMaster", b =>
                {
                    b.Navigation("ToDoChecklistToDoTasks");

                    b.Navigation("ToDoReminderToDoTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
